import java.util.*;


public class ConnectFour {




    //puts disk in next available spot, returns true if successful, false if not
    public static boolean putDisk(char[][] gameBoard, int column, char color) {
        //looks to see if a column is filled, if it is, returl false
        if (gameBoard[0][column] != ' ')
            return false;




        //checks to see which elements are filled
        for (int row = 0; row < 7; ++row) {
            if (gameBoard[row][column] != ' ') {
                //finds the top of the stack, inserts chip
                gameBoard[row-1][column] = color;
                return true;
            }
        }
        //places chip at bottom if none are found
        gameBoard[6][column] = color;
        return true;
    }
    
    public static int returnRandomColumn(){
        int randomNum = 1 + (int)(Math.random() * (6 + 1));
        return randomNum;
    }




// checks rows for win
    private static char getWinnerInRows(char[][] gameBoard) {
        for (int row = 0; row < 7; ++row) {
            int count = 0;
            // We will compare current element with the previous
            for (int column = 1; column < 7; ++column) {
                if (gameBoard[row][column] != ' ' && gameBoard[row][column] == gameBoard[row][column-1])
                    ++count;
                else
                    count = 1;
                //if there are or more, the color of the winner is returned.
                if (count >= 4) {
                    return gameBoard[row][column];
                }
            }
        }
        return ' ';
    }




    //checks columns for win
    private static char getWinnerInColumns(char[][] gameBoard) {
        //Check each row to see if there are 4 disks of the same color in a line
        for (int column = 0; column < 7; ++column) {
            int count = 0;
            //Compares the current element with the previous one
            for (int row = 1; row < 7; ++row) {
                if (gameBoard[row][column] != ' ' &&
                    gameBoard[row][column] == gameBoard[row-1][column])
                    ++count;
                else
                    count = 1;




                //Checks if there are 4 in a row.
                if (count >= 4) {
                    //Returns color of the winner
                    return gameBoard[row][column];
                }
            }
        }
        //If no one won yet, returns a space.
        return ' ';
    }




    //Checks diagonals for win
    private static char getWinnerInDiagonals(char[][] gameBoard) {
        //checks fo diagonals from top
        for (int column = 0; column < 7; ++column) {
            int count = 0;
            for (int row = 1; row < 7; ++row) {
                // Coordinates an the diagonal change as [row + i][column + i], so we stop when column can get outside of the range
                if (column + row >= 7) break;
                if (gameBoard[row][column+row] != ' ' && gameBoard[row-1][column + row - 1] == gameBoard[row][column+row])
                    ++count;
                else
                    count = 1;
                if (count >= 4) return gameBoard[row][column+row];
            }
        }
        //checks for diagonals from left
        for (int row = 0; row < 7; ++row) {
            int count = 0;
            for (int column = 1; column < 7; ++column) {
                 //Coordinates of the diagonal change as [row + i][column + i]. It stops when outside of the range.
                if (column + row >= 7) break;
                if (gameBoard[row + column][column] != ' ' &&
                    gameBoard[row+column - 1][column - 1] == gameBoard[row + column][column])
                    ++count;
                else
                    count = 1;
                if (count >= 4) return gameBoard[row + column][column];
            }
        }




        //Checks diagonals that start on top of each column
        for (int column = 0; column < 7; ++column) {
            int count = 0;
            //we did this for rows and columns
            for (int row = 1; row < 7; ++row) {
                if (column - row < 0)
                    break;
                if (gameBoard[row][column-row] != ' ' && gameBoard[row - 1][column - row + 1] == gameBoard[row][column-row])
                    ++count;
                else
                    count = 1;
                if (count >= 4) return gameBoard[row][column-row];
            }
        }




        //Checks diagonals that start on the left of each row.
        for (int row = 0; row < 7; ++row) {
            int count = 0;
            //Checks diagonal that at [row][0]
            for (int column = 5; column >= 0; --column) {
                if (column - row < 0) break;
                if (gameBoard[column - row][column] != ' ' &&
                    gameBoard[column - row - 1][column + 1] == gameBoard[column - row][column])
                    ++count;
                else
                    count = 1;
                if (count >= 4) return gameBoard[column - row][column];
            }
        }
        //no win = space
        return ' ';
    }




    public static char getWinner(char[][] gameBoard) {
        char winner = getWinnerInRows(gameBoard);
        if (winner != ' ') return winner;
        winner = getWinnerInColumns(gameBoard);
        if (winner != ' ') return winner;
        winner = getWinnerInDiagonals(gameBoard);
        if (winner != ' ') return winner;




        //If all the spots are used, it's a draw
        for (int i = 0; i < gameBoard.length; ++i)
            for (int j = 0; j < gameBoard[i].length; ++j)
                if (gameBoard[i][j] == ' ') return ' ';




        return 'D';
    }
    //Prints the walls of the board (‘|’)
    public static void printgameBoard(char[][] gameBoard) {
        for (int row = 0; row < 7; ++row) {
            System.out.print("| ");
            for (int col = 0; col < 7; ++col)
                System.out.print(gameBoard[row][col] + "| ");
            System.out.println();
        }




        //Prints the bottom line
        for (int col = 0; col < 7; ++col)
            System.out.print("---");
        System.out.println();
    }




    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        //Creates gameBoard matrix
        char[][] gameBoard = new char[7][7];
        
        System.out.println("How do you want to play?\n1. Player VS. Player\n2. Player VS. Computer");
        
        int gameMode = scan.nextInt();
        
        //Player VS. Player
        if(gameMode == 1) {




            //Initialize with spaces
            for (int i = 0; i < 7; ++i)
                for (int j = 0; j < 7; ++j)
                    gameBoard[i][j] = ' ';
        
            printgameBoard(gameBoard);




            //If redTurn is true, it’s Red’s turn. If it’s false, it’s Yellow’s turn.
            boolean redTurn = true;
            while (true) {
                if (redTurn)
                    System.out.println("Red's turn.");            
                else 
                    System.out.println("Yellow's turn.");
                System.out.print("Choose column (1-7) for a disk:");
                //Checks if the position of turn value is correct.
                int column = scan.nextInt();
                if (column < 1 || column > 7) {
                    System.out.println("Column should be from 1 to 7");
                    continue;
                }
                //Tries to put disk in a column, returns false if the column is filled.
                if (!putDisk(gameBoard, column - 1, redTurn ? 'R' : 'Y')) {
                    System.out.println("This column is filled! Choose another one.");
                    continue;
                }




                printgameBoard(gameBoard);




                //Returns R if Red wins, Y if Yellow wins, D if it's a draw, and a space if the game is still going.
                char result = getWinner(gameBoard);
                if (result == 'D') {
                    System.out.println("It is a draw.");
                    break;
                }
                else if (result == 'R') {
                    System.out.println("Red wins.");
                    break;
                }
                else if (result == 'Y') {
                    System.out.println("Yellow wins.");
                    break;
                }
                //Otherwise, it goes to the next turn by changing redTurn to true or false.
                redTurn = !redTurn;
            }
        }
        //Player VS. Computer
        if(gameMode == 2) {
        
         //Initialize with spaces
            for (int i = 0; i < 7; ++i)
                for (int j = 0; j < 7; ++j)
                    gameBoard[i][j] = ' ';
        
            printgameBoard(gameBoard);




            //If redTurn is true, it’s the player's turn (Red). If it’s false, it’s the computer's turn (Yellow).
            boolean redTurn = true;
            while (true) {
                if (redTurn)
                    System.out.println("Your turn.");            
                else 
                    System.out.println("Computer's turn.");
                int column = returnRandomColumn();
                if (column < 1 || column > 7) {
                    System.out.println("Column should be from 1 to 7");
                    continue;
                }
                //Tries to put disk in a column, returns false if the column is filled.
                if (!putDisk(gameBoard, column - 1, redTurn ? 'R' : 'Y')) {
                    System.out.println("This column is filled! Choose another one.");
                    continue;
                }




                printgameBoard(gameBoard);




                //Returns R if Red wins, Y if Yellow wins, D if it's a draw, and a space if the game is still going.
                char result = getWinner(gameBoard);
                if (result == 'D') {
                    System.out.println("It is a draw.");
                    break;
                }
                else if (result == 'R') {
                    System.out.println("You win.");
                    break;
                }
                else if (result == 'Y') {
                    System.out.println("Computer wins.");
                    break;
                }
                //Otherwise, it goes to the next turn by changing redTurn to true or false.
                redTurn = !redTurn;
            }
        
        }
    }
}


